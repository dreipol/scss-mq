@import '../vendor/@dreipol/scss-utils/functions/selector-get-element-name';
@import '../vendor/sass-to-js/sass/sass-to-js';
@import '../vendor/include-media-or/dist/include-media-or';


/// Check a list of conditions for it's validity based on the used operator as only `<=` and `>` make sense
/// @param {List} $conditions - List of conditions, possibly nested
///
@mixin _mq--check-condition-validity($conditions) {
    @each $condition in $conditions {
        @if (type-of($condition) == 'list') {
            @include _mq--check-condition-validity($condition);
        } @else if not map-has-key($media-expressions, $condition) {
            $operator: get-expression-operator($condition);

            @if not index(('<=', 'â‰¤', '>'), $operator) {
                @error 'Operator `#{$operator}` is not allowed in condition `#{$condition}`';
            }
        }
    }
}

/// Convert a map of media expressions into a list of all possible viewport combinations
/// @param {Map} $expressions - Map of media feature expressions, grouped by type
/// @return {Map} - Conjugated map of all possible media feature expressions
///
@function _mq--conditions($expressions) {
    $result: ((),);

    @each $list-key, $list-value in $expressions {
        $combinations: ();
        $list-value: map-merge((null: null), $list-value);

        @each $item-key, $item-value in $list-value {
            @each $combination in $result {
                $combinations: append($combinations, map-merge($combination, ($list-key: $item-key)));
            }
        }

        $result: $combinations;
    }

    @return $result;
}

/// Convert a list of media expressions into a list of sass maps with name and query properties
/// @param {Map} $expressions - A flat list of media feature expressions
/// @return {List} - A list of maps containing all available separate media queries used in the project
///
@function _mq--expressions($expressions) {
    $result: ();

    @each $type, $conditions in $expressions {
        @each $name, $value in $conditions {
            $result: append($result, (name: $name, query: $value, type: $type));
        }
    }

    @return $result;
}

/// Writes the viewport information into a content attribute, contained by the media expression it describes
/// @param {string} $root-class - Class that serves as root name for the elements containing the mq data
///
@mixin _mq--write($root-class) {
    // Type
    @each $type-key, $type-value in $media-type-expressions {
        #{$root-class}-type::before {
            @include mq($type-value) {
                content: sassToJs($type-value);
            }
        }
    }

    // Conditions
    @each $conditions in _mq--conditions($media-feature-expressions) {
        $media-conditions: map-values($conditions);

        #{$root-class}-conditions::before {
            @include mq($media-conditions...) {
                content: sassToJs($conditions);
            }
        }
    }

    // Expressions
    $expressions-list: _mq--expressions(map-merge((type: $media-type-expressions), $media-feature-expressions));

    #{$root-class} #{$root-class}-expressions::before {
        content: sassToJs($expressions-list);
    }
}
